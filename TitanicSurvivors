{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30822,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd  # Data manipulation and analysis\nimport numpy as np  # Numerical operations\nimport matplotlib.pyplot as plt  # Data visualization\nimport seaborn as sns  # High-level data visualization based on matplotlib\n\nfrom sklearn.impute import SimpleImputer  # Handling missing values\nfrom sklearn.preprocessing import OneHotEncoder  # Encoding categorical features\nfrom sklearn.compose import ColumnTransformer  # Applying transformers to columns\nfrom sklearn.pipeline import Pipeline  # Assembling steps for cross-validation\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier  # Machine learning algorithm for classification\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score  # Cross-validation for evaluating scores\n\n\n# pd.set_option('display.max_rows', None)  # Display all rows in pandas DataFrame\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\n# Models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nimport warnings\n# Ignore all warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:21:22.901093Z","iopub.execute_input":"2025-01-07T22:21:22.901474Z","iopub.status.idle":"2025-01-07T22:21:25.019881Z","shell.execute_reply.started":"2025-01-07T22:21:22.901435Z","shell.execute_reply":"2025-01-07T22:21:25.019015Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Load the training data","metadata":{}},{"cell_type":"code","source":"# Read the CSV files into pandas DataFrames\ntrain_df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ngender_submission_df = pd.read_csv(\"/kaggle/input/titanic/gender_submission.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:23:24.795445Z","iopub.execute_input":"2025-01-07T22:23:24.795803Z","iopub.status.idle":"2025-01-07T22:23:24.838376Z","shell.execute_reply.started":"2025-01-07T22:23:24.795771Z","shell.execute_reply":"2025-01-07T22:23:24.837303Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"load test data","metadata":{}},{"cell_type":"code","source":"train_df.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:23:27.578271Z","iopub.execute_input":"2025-01-07T22:23:27.578599Z","iopub.status.idle":"2025-01-07T22:23:27.602229Z","shell.execute_reply.started":"2025-01-07T22:23:27.578574Z","shell.execute_reply":"2025-01-07T22:23:27.601099Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_df.shape)\nprint(test_df.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:23:48.235637Z","iopub.execute_input":"2025-01-07T22:23:48.236035Z","iopub.status.idle":"2025-01-07T22:23:48.242190Z","shell.execute_reply.started":"2025-01-07T22:23:48.235999Z","shell.execute_reply":"2025-01-07T22:23:48.240790Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_df.describe())\nprint(test_df.describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:24:07.786684Z","iopub.execute_input":"2025-01-07T22:24:07.787169Z","iopub.status.idle":"2025-01-07T22:24:07.832891Z","shell.execute_reply.started":"2025-01-07T22:24:07.787131Z","shell.execute_reply":"2025-01-07T22:24:07.831895Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Exploring a pattern where a percentage of women passenger aboard the titanic survived the tragedy, and men did not survive.","metadata":{}},{"cell_type":"code","source":"women = train_df.loc[train_df.Sex == 'female']['Survived']\nrate_women = sum(women)/len(women)\n\nprint(\"% of women who survived:\", rate_women) #0.7420382165605095","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:24:31.819335Z","iopub.execute_input":"2025-01-07T22:24:31.819685Z","iopub.status.idle":"2025-01-07T22:24:31.829697Z","shell.execute_reply.started":"2025-01-07T22:24:31.819657Z","shell.execute_reply":"2025-01-07T22:24:31.828602Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Data for percentage of men who survived","metadata":{}},{"cell_type":"code","source":"men = train_df.loc[train_df.Sex == 'male']['Survived']\nrate_men = sum(men)/len(men)\n\nprint(\"% of men who survived:\", rate_men) #0.18890814558058924\n\n# Calculate the median age grouped by Pclass and Sex\n# group_medians = train_data.groupby(['Pclass', 'Sex'])['Age'].median()\n\n# # Fill missing Age values with corresponding group medians\n# train_data['Age'] = train_data.apply(\n#     lambda row: group_medians[row['Pclass'], row['Sex']] if pd.isnull(row['Age']) else row['Age'],\n#     axis=1\n# )\n\n# # Calculate the median age grouped by Pclass and Sex\n# group_medians_test = test_data.groupby(['Pclass', 'Sex'])['Age'].median()\n\n# # Fill missing Age values with corresponding group medians\n# test_data['Age'] = test_data.apply(\n#     lambda row: group_medians_test[row['Pclass'], row['Sex']] if pd.isnull(row['Age']) else row['Age'],\n#     axis=1\n# )\n\n# # Verify if there are still missing Age values\n# train_data['Age'].isnull().sum()\n\n# if test_data['Age'].isnull().values.any():\n#     print(\"There are NaN values in the dataset.\")\n# else:\n#     print(\"No NaN values in the dataset.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:25:01.547459Z","iopub.execute_input":"2025-01-07T22:25:01.547812Z","iopub.status.idle":"2025-01-07T22:25:01.554797Z","shell.execute_reply.started":"2025-01-07T22:25:01.547782Z","shell.execute_reply":"2025-01-07T22:25:01.553784Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_df.info())\nprint(test_df.info())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:25:18.394424Z","iopub.execute_input":"2025-01-07T22:25:18.394787Z","iopub.status.idle":"2025-01-07T22:25:18.425342Z","shell.execute_reply.started":"2025-01-07T22:25:18.394756Z","shell.execute_reply":"2025-01-07T22:25:18.424247Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Exploratory data analysis (*EDA*)**","metadata":{}},{"cell_type":"code","source":"# Function for Finding missing value\ndef plot_missing_data(dataset, title):\n    fig, ax = plt.subplots(figsize=(5,5))\n    plt.title(title)  \n    sns.heatmap(dataset.isnull(), cbar=False)\n\nplot_missing_data(train_df, \"Training Dataset\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:26:44.635194Z","iopub.execute_input":"2025-01-07T22:26:44.635579Z","iopub.status.idle":"2025-01-07T22:26:45.116282Z","shell.execute_reply.started":"2025-01-07T22:26:44.635547Z","shell.execute_reply":"2025-01-07T22:26:45.115299Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_missing_data(test_df, \"Test Dataset\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:27:12.081622Z","iopub.execute_input":"2025-01-07T22:27:12.081958Z","iopub.status.idle":"2025-01-07T22:27:12.544143Z","shell.execute_reply.started":"2025-01-07T22:27:12.081931Z","shell.execute_reply":"2025-01-07T22:27:12.543000Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:27:28.945780Z","iopub.execute_input":"2025-01-07T22:27:28.946169Z","iopub.status.idle":"2025-01-07T22:27:28.954386Z","shell.execute_reply.started":"2025-01-07T22:27:28.946138Z","shell.execute_reply":"2025-01-07T22:27:28.953315Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:27:43.043072Z","iopub.execute_input":"2025-01-07T22:27:43.043427Z","iopub.status.idle":"2025-01-07T22:27:43.052428Z","shell.execute_reply.started":"2025-01-07T22:27:43.043400Z","shell.execute_reply":"2025-01-07T22:27:43.051285Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Function for Barchart to visualized \n\ndef bar_chart_stacked(dataset, feature, stacked=True):\n    alive = dataset[dataset['Survived'] == 1][feature].value_counts()\n    dead = dataset[dataset['Survived'] == 0][feature].value_counts()\n    df_alive_dead = pd.DataFrame([alive, dead])\n    df_alive_dead.index = ['Passengers Alive', 'Passengers Died']\n    \n    ax = df_alive_dead.plot(kind='bar', stacked=stacked, figsize=(8, 5))\n    \n    # Annotate the bars with the counts for each segment\n    for container in ax.containers:\n        ax.bar_label(container, label_type='center')\n    \n    # Calculate and annotate the total count for each bar\n    totals = df_alive_dead.sum(axis=1)\n    for i, total in enumerate(totals):\n        ax.text(i, total + 1, str(total), ha='center', va='bottom', weight='bold')\n    \n    plt.title(f'Stacked Bar Chart of {feature}')\n    plt.xlabel(feature)\n    plt.ylabel('Number of Passengers')\n    plt.show()\n\nbar_chart_stacked(train_df, 'Sex')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:28:37.377631Z","iopub.execute_input":"2025-01-07T22:28:37.378077Z","iopub.status.idle":"2025-01-07T22:28:37.681667Z","shell.execute_reply.started":"2025-01-07T22:28:37.378040Z","shell.execute_reply":"2025-01-07T22:28:37.680635Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby('Sex').Survived.mean()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:28:49.697911Z","iopub.execute_input":"2025-01-07T22:28:49.698356Z","iopub.status.idle":"2025-01-07T22:28:49.711039Z","shell.execute_reply.started":"2025-01-07T22:28:49.698325Z","shell.execute_reply":"2025-01-07T22:28:49.709938Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bar_chart_stacked(train_df, \"Survived\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:29:01.953737Z","iopub.execute_input":"2025-01-07T22:29:01.954169Z","iopub.status.idle":"2025-01-07T22:29:02.244396Z","shell.execute_reply.started":"2025-01-07T22:29:01.954133Z","shell.execute_reply":"2025-01-07T22:29:02.243236Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Analyze Feature Pclass:\nbar_chart_stacked(train_df, 'Pclass')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:29:17.665758Z","iopub.execute_input":"2025-01-07T22:29:17.666200Z","iopub.status.idle":"2025-01-07T22:29:17.917232Z","shell.execute_reply.started":"2025-01-07T22:29:17.666164Z","shell.execute_reply":"2025-01-07T22:29:17.916096Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.pivot_table(train_df, index='Survived', columns='Pclass', values='PassengerId', aggfunc='count')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:29:30.986126Z","iopub.execute_input":"2025-01-07T22:29:30.986520Z","iopub.status.idle":"2025-01-07T22:29:31.008601Z","shell.execute_reply.started":"2025-01-07T22:29:30.986489Z","shell.execute_reply":"2025-01-07T22:29:31.007282Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby(['Pclass']).Survived.mean()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:29:45.057497Z","iopub.execute_input":"2025-01-07T22:29:45.057895Z","iopub.status.idle":"2025-01-07T22:29:45.066236Z","shell.execute_reply.started":"2025-01-07T22:29:45.057851Z","shell.execute_reply":"2025-01-07T22:29:45.065230Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Observation:**\n\nFrom the plots and tables presented above, it becomes evident that the passenger class (Pclass) is a significant factor to consider when analyzing survival rates. The data indicates a clear correlation between a passenger's class and their likelihood of survival.","metadata":{}},{"cell_type":"code","source":"# Function for Barchart Compare\ndef bar_compare(dataset, feature1, feature2=None):\n    plt.figure(figsize = [5,5])\n    g = sns.barplot(x=feature1, y='Survived', hue=feature2, errorbar=None, data=dataset).set_ylabel('Survival rate') #ci=None is depreciated\n\nbar_compare(train_df, \"Pclass\", \"Sex\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:31:30.752285Z","iopub.execute_input":"2025-01-07T22:31:30.752625Z","iopub.status.idle":"2025-01-07T22:31:31.097797Z","shell.execute_reply.started":"2025-01-07T22:31:30.752598Z","shell.execute_reply":"2025-01-07T22:31:31.096879Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.pivot_table(train_df, index = 'Survived', columns = ['Pclass', \"Sex\"], values = 'PassengerId' ,aggfunc ='count')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:31:43.885528Z","iopub.execute_input":"2025-01-07T22:31:43.885855Z","iopub.status.idle":"2025-01-07T22:31:43.907400Z","shell.execute_reply.started":"2025-01-07T22:31:43.885827Z","shell.execute_reply":"2025-01-07T22:31:43.906339Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby(['Pclass']).Survived.mean().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:31:56.940944Z","iopub.execute_input":"2025-01-07T22:31:56.941347Z","iopub.status.idle":"2025-01-07T22:31:56.951416Z","shell.execute_reply.started":"2025-01-07T22:31:56.941319Z","shell.execute_reply":"2025-01-07T22:31:56.950309Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.crosstab(train_df['Sex'], train_df['Survived'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:32:10.541890Z","iopub.execute_input":"2025-01-07T22:32:10.542310Z","iopub.status.idle":"2025-01-07T22:32:10.560406Z","shell.execute_reply.started":"2025-01-07T22:32:10.542279Z","shell.execute_reply":"2025-01-07T22:32:10.559494Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.crosstab(train_df['Pclass'], train_df['Survived'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:32:25.104029Z","iopub.execute_input":"2025-01-07T22:32:25.104395Z","iopub.status.idle":"2025-01-07T22:32:25.122212Z","shell.execute_reply.started":"2025-01-07T22:32:25.104367Z","shell.execute_reply":"2025-01-07T22:32:25.121100Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby(['Pclass', \"Sex\"]).Survived.mean().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:32:36.726043Z","iopub.execute_input":"2025-01-07T22:32:36.726405Z","iopub.status.idle":"2025-01-07T22:32:36.739836Z","shell.execute_reply.started":"2025-01-07T22:32:36.726379Z","shell.execute_reply":"2025-01-07T22:32:36.738700Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"From the plots and tables above, it becomes clear that the Pclass and Sex columns is an important factor to consider.\n\n","metadata":{}},{"cell_type":"markdown","source":"**Analyze Age, is it important?**","metadata":{}},{"cell_type":"code","source":"# Bell curve\ndef plot_distribution(dataset, feature, title, bins = 30, hist = True, fsize = (5,5), fize = (155)):\n    fig, ax = plt.subplots(figsize=fsize)\n    ax.set_title(title)\n    sns.histplot(train_df[feature], color='g', bins=bins, ax=ax)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:40:37.768296Z","iopub.execute_input":"2025-01-07T22:40:37.768653Z","iopub.status.idle":"2025-01-07T22:40:37.773872Z","shell.execute_reply.started":"2025-01-07T22:40:37.768624Z","shell.execute_reply":"2025-01-07T22:40:37.772697Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Age Distribution Surived vs Died\ndef plot_kernel_density_estimate_survivors(dataset, feature1, title, fsize = (5,5)):\n    fig, ax = plt.subplots(figsize=fsize)\n    ax.set_title(title) \n    sns.kdeplot(dataset[feature1].loc[train_df[\"Survived\"] == 1],color='g',\n                fill= True, ax=ax, label='Survived').set_xlabel(feature1)\n    sns.kdeplot(dataset[feature1].loc[train_df[\"Survived\"] == 0],\n                fill=True, ax=ax, label=\"Died\" , color='r')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:41:44.711783Z","iopub.execute_input":"2025-01-07T22:41:44.712210Z","iopub.status.idle":"2025-01-07T22:41:44.718608Z","shell.execute_reply.started":"2025-01-07T22:41:44.712176Z","shell.execute_reply":"2025-01-07T22:41:44.717361Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_distribution(train_df, 'Age', \"Passengers age\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:40:40.263647Z","iopub.execute_input":"2025-01-07T22:40:40.264068Z","iopub.status.idle":"2025-01-07T22:40:40.616320Z","shell.execute_reply.started":"2025-01-07T22:40:40.264031Z","shell.execute_reply":"2025-01-07T22:40:40.615341Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_kernel_density_estimate_survivors(train_df, 'Age', \"Passengers age with Survived\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:41:51.637310Z","iopub.execute_input":"2025-01-07T22:41:51.637697Z","iopub.status.idle":"2025-01-07T22:41:51.999543Z","shell.execute_reply.started":"2025-01-07T22:41:51.637665Z","shell.execute_reply":"2025-01-07T22:41:51.998134Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"MACHINE LEARNING MODEL: Random Forest model look for patterns in four different columns (\"Pclass\", \"Sex\", \"SibSp\", and \"Parch\")","metadata":{}},{"cell_type":"markdown","source":"To analyze the features \"Age\" and \"Sex\" together and visualize their impact","metadata":{}},{"cell_type":"code","source":"def swarmplot_survivors(dataset, feature1, feature2, title):\n    fig, ax = plt.subplots(figsize=(18,5))\n    # Turns off grid on the left Axis.\n    ax.grid(True)\n    plt.xticks(list(range(0,100,2)))\n    sns.swarmplot(y=feature1, x=feature2, hue='Survived', hue_order=[1, 0],palette={1: 'green', 0: 'red'}, data=train_df).set_title(title)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:42:48.968553Z","iopub.execute_input":"2025-01-07T22:42:48.968920Z","iopub.status.idle":"2025-01-07T22:42:48.974860Z","shell.execute_reply.started":"2025-01-07T22:42:48.968888Z","shell.execute_reply":"2025-01-07T22:42:48.973610Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"swarmplot_survivors(train_df, 'Sex','Age', \"Survivor Swarmplot for Age vs Sex\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T22:42:51.831572Z","iopub.execute_input":"2025-01-07T22:42:51.832037Z","iopub.status.idle":"2025-01-07T22:42:53.503175Z","shell.execute_reply.started":"2025-01-07T22:42:51.831994Z","shell.execute_reply":"2025-01-07T22:42:53.502112Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Observations:**\n\nAge Distribution:\nThere are more young survivors (ages 0-10) in the 'female' category compared to the 'male' category. The age distribution among males shows a higher concentration in the 20-40 age range. Females also show a significant concentration in the 20-40 age range but with more survivors than males.\n\nSurvival Rate by Gender:\nThere are more orange dots (survivors) among females across all age groups, indicating a higher survival rate for females. Males have more blue dots (non-survivors) compared to females, especially noticeable in the 20-40 age range.\n\nOutliers:\nThere are few older individuals (70-80 years) in both categories, with very few survivors.\n\n--> **Analyze Features Age and Pclass together**","metadata":{}},{"cell_type":"code","source":"swarmplot_survivors(train_df, 'Pclass', 'Age', 'Age vs Pclass' )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:15:29.814606Z","iopub.execute_input":"2025-01-07T23:15:29.814989Z","iopub.status.idle":"2025-01-07T23:15:32.513170Z","shell.execute_reply.started":"2025-01-07T23:15:29.814934Z","shell.execute_reply":"2025-01-07T23:15:32.511946Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"People in First class survived more then people in second class, with more female surviving than males in both classes.","metadata":{}},{"cell_type":"markdown","source":"Analyze Fare","metadata":{}},{"cell_type":"code","source":"train_df[\"Fare\"].describe().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:18:41.276041Z","iopub.execute_input":"2025-01-07T23:18:41.276406Z","iopub.status.idle":"2025-01-07T23:18:41.288381Z","shell.execute_reply.started":"2025-01-07T23:18:41.276378Z","shell.execute_reply":"2025-01-07T23:18:41.287410Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_distribution(train_df, 'Fare', \"Passengers fare\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:18:49.179711Z","iopub.execute_input":"2025-01-07T23:18:49.180099Z","iopub.status.idle":"2025-01-07T23:18:49.493159Z","shell.execute_reply.started":"2025-01-07T23:18:49.180068Z","shell.execute_reply":"2025-01-07T23:18:49.492176Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Observation:¶\nThe Fare data does not follow a normal distribution and exhibits a significant peak in the price range of 0 − 100.\n\nThe distribution is skewed to the right, with 75% of fares being under 31USD and a maximum fare of 512USD. Given this skewness, **it might be beneficial to normalize this feature, depending on the machine learning model being used. This will be addressed in the feature engineering stage.**\n\nTo understand how the Fare feature influences the survival rate, we could plot bar charts of Fare vs. Survived. However, due to the wide range of fare values, such a plot may not provide meaningful insights.\n\nA more effective visualization would involve categorizing the fare values and then plotting these categories against the survival rate.","metadata":{}},{"cell_type":"code","source":"def plot_quartiles(dataset, feature, title, categories):\n    fig, axarr = plt.subplots(figsize=(5,5))\n    fare_ranges = pd.qcut(dataset[feature], len(categories), labels = categories) #. [0, .25, .5, .75, 1.]\n    axarr.set_title(title)\n    sns.barplot(x=fare_ranges, y=dataset.Survived, errorbar=None, ax=axarr).set_ylabel('Survival rate') #ci=None, depreciated use errorbar=None\n\ncategories = ['Cheap', 'Standard', 'Expensive', 'Luxury']\n\nplot_quartiles(train_df, \"Fare\", \"Survival Rate by Fare Ranges/Categories\", categories)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:33:27.002325Z","iopub.execute_input":"2025-01-07T23:33:27.002666Z","iopub.status.idle":"2025-01-07T23:33:27.258489Z","shell.execute_reply.started":"2025-01-07T23:33:27.002640Z","shell.execute_reply":"2025-01-07T23:33:27.257331Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"swarmplot_survivors(train_df, \"Sex\", \"Fare\",\"Survivor Swarmplot for Age vs Gender\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:33:43.786631Z","iopub.execute_input":"2025-01-07T23:33:43.787032Z","iopub.status.idle":"2025-01-07T23:33:53.420456Z","shell.execute_reply.started":"2025-01-07T23:33:43.786968Z","shell.execute_reply":"2025-01-07T23:33:53.419457Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.Fare.value_counts().head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:36:00.043868Z","iopub.execute_input":"2025-01-07T23:36:00.044259Z","iopub.status.idle":"2025-01-07T23:36:00.052136Z","shell.execute_reply.started":"2025-01-07T23:36:00.044230Z","shell.execute_reply":"2025-01-07T23:36:00.051099Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Observation:**\n\nFifteen passengers paid no fare, which is unrealistic. Therefore, I will replace the 0 values with NaN and later determine an appropriate method to impute these values","metadata":{}},{"cell_type":"code","source":"# Replace Fare == 0 with nan\ntrain_df['Fare'] = train_df['Fare'].replace(0, np.nan)\ntest_df['Fare'] = train_df['Fare'].replace(0, np.nan)\n\ntrain_df[train_df['Fare']==0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:37:44.689407Z","iopub.execute_input":"2025-01-07T23:37:44.689756Z","iopub.status.idle":"2025-01-07T23:37:44.701967Z","shell.execute_reply.started":"2025-01-07T23:37:44.689725Z","shell.execute_reply":"2025-01-07T23:37:44.700838Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_df[test_df['Fare']==0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:38:05.280789Z","iopub.execute_input":"2025-01-07T23:38:05.281248Z","iopub.status.idle":"2025-01-07T23:38:05.291663Z","shell.execute_reply.started":"2025-01-07T23:38:05.281215Z","shell.execute_reply":"2025-01-07T23:38:05.290379Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Analyze Feature Embarked**","metadata":{}},{"cell_type":"code","source":"def countplot(dataset, feature, title, fsize = (5,5)):\n    fig, ax = plt.subplots(figsize=fsize)\n    sns.countplot(dataset[feature], ax=ax).set_title(title)\n    \ndef compare_countplot(dataset, feature1, feature2, title):\n    fig, ax = plt.subplots(figsize=(5,5))\n    p = sns.countplot(x = feature1, hue = feature2, data = dataset, ax=ax).set_title(title) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:42:37.322769Z","iopub.execute_input":"2025-01-07T23:42:37.323243Z","iopub.status.idle":"2025-01-07T23:42:37.329397Z","shell.execute_reply.started":"2025-01-07T23:42:37.323205Z","shell.execute_reply":"2025-01-07T23:42:37.328094Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bar_chart_stacked(train_df, 'Embarked')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:42:51.154640Z","iopub.execute_input":"2025-01-07T23:42:51.155077Z","iopub.status.idle":"2025-01-07T23:42:51.449131Z","shell.execute_reply.started":"2025-01-07T23:42:51.155030Z","shell.execute_reply":"2025-01-07T23:42:51.447767Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"compare_countplot(train_df, \"Embarked\", \"Survived\", \"Survivor count by place of embarktion\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:43:05.015431Z","iopub.execute_input":"2025-01-07T23:43:05.019514Z","iopub.status.idle":"2025-01-07T23:43:05.310830Z","shell.execute_reply.started":"2025-01-07T23:43:05.019457Z","shell.execute_reply":"2025-01-07T23:43:05.309470Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.pivot_table(train_df, index = 'Survived', columns = 'Embarked', values = 'PassengerId' ,aggfunc ='count')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:43:19.307714Z","iopub.execute_input":"2025-01-07T23:43:19.308134Z","iopub.status.idle":"2025-01-07T23:43:19.327714Z","shell.execute_reply.started":"2025-01-07T23:43:19.308101Z","shell.execute_reply":"2025-01-07T23:43:19.326458Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"len(train_df.query('Embarked == \"C\" and Survived==1'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:43:32.346218Z","iopub.execute_input":"2025-01-07T23:43:32.346596Z","iopub.status.idle":"2025-01-07T23:43:32.362261Z","shell.execute_reply.started":"2025-01-07T23:43:32.346565Z","shell.execute_reply":"2025-01-07T23:43:32.361279Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby(['Embarked']).Survived.mean().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:43:45.506037Z","iopub.execute_input":"2025-01-07T23:43:45.506418Z","iopub.status.idle":"2025-01-07T23:43:45.516030Z","shell.execute_reply.started":"2025-01-07T23:43:45.506390Z","shell.execute_reply":"2025-01-07T23:43:45.515066Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Observation:**\n\nThe Embarked feature includes three values: Southampton, Cherbourg, and Queenstown. Most passengers boarded in Southampton, but only 33% survived. In contrast, Cherbourg had a survival rate of 55%.absabs\n\nIt’s not intuitive that the place of boarding would affect survival. Why is it higher for Cherbourg? One possible explanation is the percentage of first-class passengers who embarked there, as first-class status is linked to higher survival rates.","metadata":{}},{"cell_type":"markdown","source":"**Analyze Features Embarked & Pclass at a time**","metadata":{}},{"cell_type":"code","source":"compare_countplot(train_df, 'Embarked', 'Pclass', 'Embarked vs Pclass')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:45:02.386362Z","iopub.execute_input":"2025-01-07T23:45:02.386767Z","iopub.status.idle":"2025-01-07T23:45:02.682444Z","shell.execute_reply.started":"2025-01-07T23:45:02.386739Z","shell.execute_reply":"2025-01-07T23:45:02.681349Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby(['Pclass', 'Embarked', \"Sex\"]).Survived.sum().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:45:19.674256Z","iopub.execute_input":"2025-01-07T23:45:19.674621Z","iopub.status.idle":"2025-01-07T23:45:19.688208Z","shell.execute_reply.started":"2025-01-07T23:45:19.674593Z","shell.execute_reply":"2025-01-07T23:45:19.687225Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**General Observations**\n\nSurvival by Gender:\nFemales generally had a higher survival count than males across all classes and ports of embarkation. In Pclass 1, the number of female survivors was notably higher than male survivors. In Pclass 2, the difference is even more pronounced, especially for those who embarked at S (61 females vs. 15 males). In Pclass 3, the trend of higher female survivors continues but with more variation across different embarkation ports. Survival by Embarkation Port:\n\nFor Pclass 1 and Pclass 2, the majority of survivors embarked at S (Southampton), followed by C (Cherbourg), with Q (Queenstown) having the least number of survivors. For Pclass 3, the survival count is more evenly distributed among the ports, especially among females. Survival by Passenger Class:\n\nPclass 1 had relatively high survival counts, particularly among females. Pclass 2 had fewer survivors compared to Pclass 1, but females still had a significant number of survivors. Pclass 3 showed a mixed trend with a considerable number of survivors but more evenly distributed compared to Pclass 1 and 2.","metadata":{}},{"cell_type":"markdown","source":"**Analyze Features Embarked & Sex**","metadata":{}},{"cell_type":"code","source":"compare_countplot(train_df, \"Embarked\", \"Sex\", \"Passenger count by place of embarktion and sex\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:48:00.458784Z","iopub.execute_input":"2025-01-07T23:48:00.459247Z","iopub.status.idle":"2025-01-07T23:48:00.679368Z","shell.execute_reply.started":"2025-01-07T23:48:00.459191Z","shell.execute_reply":"2025-01-07T23:48:00.678361Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Analyze Feature SibSp**","metadata":{}},{"cell_type":"code","source":"train_df['SibSp'].value_counts().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:48:41.866731Z","iopub.execute_input":"2025-01-07T23:48:41.867242Z","iopub.status.idle":"2025-01-07T23:48:41.876873Z","shell.execute_reply.started":"2025-01-07T23:48:41.867207Z","shell.execute_reply":"2025-01-07T23:48:41.875734Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bar_compare(train_df, \"SibSp\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:48:54.905846Z","iopub.execute_input":"2025-01-07T23:48:54.906269Z","iopub.status.idle":"2025-01-07T23:48:55.080246Z","shell.execute_reply.started":"2025-01-07T23:48:54.906241Z","shell.execute_reply":"2025-01-07T23:48:55.079135Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby(['SibSp']).Survived.mean().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:49:12.811051Z","iopub.execute_input":"2025-01-07T23:49:12.811586Z","iopub.status.idle":"2025-01-07T23:49:12.822206Z","shell.execute_reply.started":"2025-01-07T23:49:12.811538Z","shell.execute_reply":"2025-01-07T23:49:12.821065Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"compare_countplot(train_df, \"SibSp\", \"Survived\", \"Survivor count by number of sibling the Titanic\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:49:29.690460Z","iopub.execute_input":"2025-01-07T23:49:29.690794Z","iopub.status.idle":"2025-01-07T23:49:30.009723Z","shell.execute_reply.started":"2025-01-07T23:49:29.690769Z","shell.execute_reply":"2025-01-07T23:49:30.008537Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Analyze Feature Parch**","metadata":{}},{"cell_type":"code","source":"bar_compare(train_df, \"Parch\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:52:05.786836Z","iopub.execute_input":"2025-01-07T23:52:05.787280Z","iopub.status.idle":"2025-01-07T23:52:05.968644Z","shell.execute_reply.started":"2025-01-07T23:52:05.787252Z","shell.execute_reply":"2025-01-07T23:52:05.967217Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby(['Parch']).Survived.mean().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:52:09.681821Z","iopub.execute_input":"2025-01-07T23:52:09.682226Z","iopub.status.idle":"2025-01-07T23:52:09.692407Z","shell.execute_reply.started":"2025-01-07T23:52:09.682193Z","shell.execute_reply":"2025-01-07T23:52:09.691365Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Observation:**\n\nThis feature, like the SibSp column, represents the number of parents or children each passenger was traveling with. Similar patterns emerge: small families had higher survival rates compared to larger families and passengers traveling alone.","metadata":{}},{"cell_type":"markdown","source":"**#Feature engineering#**","metadata":{}},{"cell_type":"markdown","source":"Feaature name:","metadata":{}},{"cell_type":"code","source":"pd.unique(train_df['Name'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:53:21.242683Z","iopub.execute_input":"2025-01-07T23:53:21.243117Z","iopub.status.idle":"2025-01-07T23:53:21.254200Z","shell.execute_reply.started":"2025-01-07T23:53:21.243080Z","shell.execute_reply":"2025-01-07T23:53:21.253230Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Extracting the titles from the name","metadata":{}},{"cell_type":"code","source":"train_df['Title']=train_df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntest_df['Title']=test_df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\n\ntrain_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:54:31.948637Z","iopub.execute_input":"2025-01-07T23:54:31.949072Z","iopub.status.idle":"2025-01-07T23:54:31.966847Z","shell.execute_reply.started":"2025-01-07T23:54:31.949036Z","shell.execute_reply":"2025-01-07T23:54:31.965425Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:54:41.644692Z","iopub.execute_input":"2025-01-07T23:54:41.645088Z","iopub.status.idle":"2025-01-07T23:54:41.659638Z","shell.execute_reply.started":"2025-01-07T23:54:41.645054Z","shell.execute_reply":"2025-01-07T23:54:41.658561Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df['Title'].value_counts().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:54:59.740633Z","iopub.execute_input":"2025-01-07T23:54:59.741022Z","iopub.status.idle":"2025-01-07T23:54:59.750702Z","shell.execute_reply.started":"2025-01-07T23:54:59.740965Z","shell.execute_reply":"2025-01-07T23:54:59.749810Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.countplot(data=train_df, x= 'Title', hue='Survived')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:55:29.469251Z","iopub.execute_input":"2025-01-07T23:55:29.469607Z","iopub.status.idle":"2025-01-07T23:55:29.853570Z","shell.execute_reply.started":"2025-01-07T23:55:29.469580Z","shell.execute_reply":"2025-01-07T23:55:29.852533Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby(['Title', 'Sex', 'Pclass']).Survived.sum().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:55:45.516593Z","iopub.execute_input":"2025-01-07T23:55:45.517068Z","iopub.status.idle":"2025-01-07T23:55:45.532291Z","shell.execute_reply.started":"2025-01-07T23:55:45.517027Z","shell.execute_reply":"2025-01-07T23:55:45.531106Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bar_chart_stacked(train_df, 'Title')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:56:03.052719Z","iopub.execute_input":"2025-01-07T23:56:03.053373Z","iopub.status.idle":"2025-01-07T23:56:03.823112Z","shell.execute_reply.started":"2025-01-07T23:56:03.053337Z","shell.execute_reply":"2025-01-07T23:56:03.821958Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\ntest_df['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\ntrain_df['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)\ntest_df['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)\n\ntrain_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:56:33.788838Z","iopub.execute_input":"2025-01-07T23:56:33.789333Z","iopub.status.idle":"2025-01-07T23:56:33.811204Z","shell.execute_reply.started":"2025-01-07T23:56:33.789302Z","shell.execute_reply":"2025-01-07T23:56:33.810263Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bar_chart_stacked(train_df, 'Title')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:57:14.315039Z","iopub.execute_input":"2025-01-07T23:57:14.315461Z","iopub.status.idle":"2025-01-07T23:57:14.671675Z","shell.execute_reply.started":"2025-01-07T23:57:14.315431Z","shell.execute_reply":"2025-01-07T23:57:14.670620Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.groupby(['Title', 'Sex', 'Pclass']).Survived.sum().to_frame()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T23:57:39.330443Z","iopub.execute_input":"2025-01-07T23:57:39.330785Z","iopub.status.idle":"2025-01-07T23:57:39.344929Z","shell.execute_reply.started":"2025-01-07T23:57:39.330760Z","shell.execute_reply":"2025-01-07T23:57:39.343968Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Observation:**\n\nAs expected, female titles correspond to a higher survival rate. Surprisingly, \"Master\" and \"Dr.\" titles, typically associated with males, also show a relatively high survival rate. In contrast, those with the title \"Mr.\" face a compromised survival rate of approximately 15%. Interestingly, all six individuals with the title \"Reverend\" perished, possibly indicating a decision to face their fate with dignity, enroute to heaven.","metadata":{}},{"cell_type":"markdown","source":"**Cabin and Ticket**","metadata":{}},{"cell_type":"code","source":"train_df[['Cabin', 'Ticket']].head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:00:57.487531Z","iopub.execute_input":"2025-01-08T00:00:57.487954Z","iopub.status.idle":"2025-01-08T00:00:57.499629Z","shell.execute_reply.started":"2025-01-08T00:00:57.487924Z","shell.execute_reply":"2025-01-08T00:00:57.498398Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(f\" Null number: {train_df['Cabin'].isnull().sum()}\")\nprint(f\" Total number: {train_df['Cabin'].shape[0]}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:01:15.038953Z","iopub.execute_input":"2025-01-08T00:01:15.039390Z","iopub.status.idle":"2025-01-08T00:01:15.045495Z","shell.execute_reply.started":"2025-01-08T00:01:15.039361Z","shell.execute_reply":"2025-01-08T00:01:15.044519Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(f\" Null number: {train_df['Ticket'].isnull().sum()}\")\nprint(f\" Total number: {train_df['Ticket'].shape[0]}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:01:31.879724Z","iopub.execute_input":"2025-01-08T00:01:31.880189Z","iopub.status.idle":"2025-01-08T00:01:31.886502Z","shell.execute_reply.started":"2025-01-08T00:01:31.880151Z","shell.execute_reply":"2025-01-08T00:01:31.885336Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:01:59.399193Z","iopub.execute_input":"2025-01-08T00:01:59.399534Z","iopub.status.idle":"2025-01-08T00:01:59.414443Z","shell.execute_reply.started":"2025-01-08T00:01:59.399509Z","shell.execute_reply":"2025-01-08T00:01:59.413477Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.query('Cabin.notnull() and Survived==1').count()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:02:35.951210Z","iopub.execute_input":"2025-01-08T00:02:35.951624Z","iopub.status.idle":"2025-01-08T00:02:35.965040Z","shell.execute_reply.started":"2025-01-08T00:02:35.951592Z","shell.execute_reply":"2025-01-08T00:02:35.963895Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.query('Cabin.notnull() and Survived==0').count()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:04:42.506848Z","iopub.execute_input":"2025-01-08T00:04:42.507321Z","iopub.status.idle":"2025-01-08T00:04:42.519541Z","shell.execute_reply.started":"2025-01-08T00:04:42.507288Z","shell.execute_reply":"2025-01-08T00:04:42.518487Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.query('Cabin.isnull() and Survived==1').count()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:04:48.186374Z","iopub.execute_input":"2025-01-08T00:04:48.186742Z","iopub.status.idle":"2025-01-08T00:04:48.198747Z","shell.execute_reply.started":"2025-01-08T00:04:48.186714Z","shell.execute_reply":"2025-01-08T00:04:48.197766Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.query('Cabin.isnull() and Survived==0').count()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:04:54.466505Z","iopub.execute_input":"2025-01-08T00:04:54.466878Z","iopub.status.idle":"2025-01-08T00:04:54.478722Z","shell.execute_reply.started":"2025-01-08T00:04:54.466845Z","shell.execute_reply":"2025-01-08T00:04:54.477694Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df['cabin_replace_num'] = train_df['Cabin'].apply(lambda x: 0 if pd.isnull(x) else 1)\ntest_df['cabin_replace_num'] = test_df['Cabin'].apply(lambda x: 0 if pd.isnull(x) else 1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:06:46.928439Z","iopub.execute_input":"2025-01-08T00:06:46.928801Z","iopub.status.idle":"2025-01-08T00:06:46.973016Z","shell.execute_reply.started":"2025-01-08T00:06:46.928770Z","shell.execute_reply":"2025-01-08T00:06:46.971309Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"I think the ticket feature doesn't matter much","metadata":{}},{"cell_type":"code","source":"train_df.drop('Cabin', axis=1, inplace=True)\ntest_df.drop('Cabin', axis=1, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:06:37.075260Z","iopub.execute_input":"2025-01-08T00:06:37.075677Z","iopub.status.idle":"2025-01-08T00:06:37.082938Z","shell.execute_reply.started":"2025-01-08T00:06:37.075648Z","shell.execute_reply":"2025-01-08T00:06:37.081691Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Feature Family Size","metadata":{}},{"cell_type":"code","source":"train_df['Fam_size'] = train_df['SibSp'] + train_df['Parch'] + 1\ntest_df['Fam_size'] = test_df['SibSp'] + test_df['Parch'] + 1\n\nbar_compare(train_df, \"Fam_size\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:06:41.490047Z","iopub.execute_input":"2025-01-08T00:06:41.490443Z","iopub.status.idle":"2025-01-08T00:06:41.698316Z","shell.execute_reply.started":"2025-01-08T00:06:41.490415Z","shell.execute_reply":"2025-01-08T00:06:41.697258Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Make Family Type","metadata":{}},{"cell_type":"code","source":"# Make of four groups\ntrain_df['Fam_type'] = pd.cut(train_df.Fam_size, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])\ntest_df['Fam_type'] = pd.cut(test_df.Fam_size, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])\n\ntrain_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:08:25.307764Z","iopub.execute_input":"2025-01-08T00:08:25.308217Z","iopub.status.idle":"2025-01-08T00:08:25.330144Z","shell.execute_reply.started":"2025-01-08T00:08:25.308183Z","shell.execute_reply":"2025-01-08T00:08:25.329080Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.drop(['Name', 'SibSp', 'Parch','Fam_size'], axis=1, inplace=True)\ntest_df.drop(['Name', 'SibSp', 'Parch','Fam_size'], axis=1, inplace=True)\n\ntrain_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:08:51.071886Z","iopub.execute_input":"2025-01-08T00:08:51.072324Z","iopub.status.idle":"2025-01-08T00:08:51.090875Z","shell.execute_reply.started":"2025-01-08T00:08:51.072291Z","shell.execute_reply":"2025-01-08T00:08:51.089851Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_df.isnull().sum())\nprint(test_df.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:09:13.550327Z","iopub.execute_input":"2025-01-08T00:09:13.550708Z","iopub.status.idle":"2025-01-08T00:09:13.560425Z","shell.execute_reply.started":"2025-01-08T00:09:13.550681Z","shell.execute_reply":"2025-01-08T00:09:13.559316Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"total_df=pd.concat([train_df, test_df])\n\ntotal_df['Survived'].isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:10:07.710849Z","iopub.execute_input":"2025-01-08T00:10:07.711313Z","iopub.status.idle":"2025-01-08T00:10:07.722020Z","shell.execute_reply.started":"2025-01-08T00:10:07.711283Z","shell.execute_reply":"2025-01-08T00:10:07.720929Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"total_df['Survived'].notnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:10:23.694372Z","iopub.execute_input":"2025-01-08T00:10:23.694723Z","iopub.status.idle":"2025-01-08T00:10:23.701020Z","shell.execute_reply.started":"2025-01-08T00:10:23.694696Z","shell.execute_reply":"2025-01-08T00:10:23.700039Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Calculate the mean fare for each Pclass\nmean_fare_per_class = total_df.groupby('Pclass')['Fare'].transform('mean')\ntotal_df['Fare']=total_df['Fare'].fillna(mean_fare_per_class)\n\ntotal_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:11:23.530522Z","iopub.execute_input":"2025-01-08T00:11:23.530922Z","iopub.status.idle":"2025-01-08T00:11:23.549635Z","shell.execute_reply.started":"2025-01-08T00:11:23.530888Z","shell.execute_reply":"2025-01-08T00:11:23.548395Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"total_df.query('Pclass==1 and Fare.isnull()')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:14:43.031599Z","iopub.execute_input":"2025-01-08T00:14:43.032086Z","iopub.status.idle":"2025-01-08T00:14:43.046594Z","shell.execute_reply.started":"2025-01-08T00:14:43.032050Z","shell.execute_reply":"2025-01-08T00:14:43.045234Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"total_df.query('Pclass==2 and Fare.isnull()')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:14:47.038627Z","iopub.execute_input":"2025-01-08T00:14:47.039025Z","iopub.status.idle":"2025-01-08T00:14:47.054377Z","shell.execute_reply.started":"2025-01-08T00:14:47.038965Z","shell.execute_reply":"2025-01-08T00:14:47.052882Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"total_df.query('Pclass==3 and Fare.isnull()')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:15:21.991208Z","iopub.execute_input":"2025-01-08T00:15:21.991591Z","iopub.status.idle":"2025-01-08T00:15:22.005318Z","shell.execute_reply.started":"2025-01-08T00:15:21.991563Z","shell.execute_reply":"2025-01-08T00:15:22.004020Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(total_df.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:15:27.322315Z","iopub.execute_input":"2025-01-08T00:15:27.322653Z","iopub.status.idle":"2025-01-08T00:15:27.330563Z","shell.execute_reply.started":"2025-01-08T00:15:27.322628Z","shell.execute_reply":"2025-01-08T00:15:27.329221Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#total_df['Embarked'] = total_df['Embarked'].fillna(total_df['Embarked'].mode())\ntotal_df['Embarked'] = total_df['Embarked'].fillna(total_df['Embarked'].mode()[0])\n\ntotal_df.query('Age.notnull() and Survived==1')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:15:32.674354Z","iopub.execute_input":"2025-01-08T00:15:32.674693Z","iopub.status.idle":"2025-01-08T00:15:32.701275Z","shell.execute_reply.started":"2025-01-08T00:15:32.674667Z","shell.execute_reply":"2025-01-08T00:15:32.700137Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"MACHINE LEARNING MODEL: Random Forest model\nlook for patterns in four different columns (\"Pclass\", \"Sex\", \"SibSp\", and \"Parch\")","metadata":{}},{"cell_type":"code","source":"total_df.query('Age.notnull() and Survived==0')\n\ntotal_df['Age'] = total_df['Age'].fillna(total_df['Age'].mean())\n\nprint(total_df.isnull().sum())\n\ntrain_dataframe=total_df.query('Survived==1 or Survived==0')\n\ntrain_dataframe.head()\n\ntrain_dataframe.shape\n\ntest_dataframe=total_df.query('Survived.isnull()')\n\ntest_dataframe.shape\n\ntest_dataframe.drop('Survived', axis=1, inplace=True)\n\ntest_dataframe.shape\n\nprint(train_dataframe.isnull().sum())\n\ntrain_dataframe['Sex'] = train_dataframe['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\ntest_dataframe['Sex'] = test_dataframe['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:19:53.105551Z","iopub.execute_input":"2025-01-08T00:19:53.105964Z","iopub.status.idle":"2025-01-08T00:19:53.133636Z","shell.execute_reply.started":"2025-01-08T00:19:53.105865Z","shell.execute_reply":"2025-01-08T00:19:53.132398Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_dataframe.drop(['PassengerId','Ticket'],axis=1, inplace=True )\ntest_dataframe.drop(['PassengerId','Ticket'],axis=1, inplace=True )\n\ntrain_dataframe.head()\n\ntest_dataframe.head()\n\ntrain_dataframe.Title.value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:21:39.646676Z","iopub.execute_input":"2025-01-08T00:21:39.647198Z","iopub.status.idle":"2025-01-08T00:21:39.660040Z","shell.execute_reply.started":"2025-01-08T00:21:39.647123Z","shell.execute_reply":"2025-01-08T00:21:39.659170Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"OneHotEncoding and scaling","metadata":{}},{"cell_type":"code","source":"# Define the columns for OneHotEncoding and scaling\ncategorical_features = ['Embarked', 'Title', 'Fam_type']\nnumeric_features = ['Pclass', 'Sex', 'Age', 'Fare', 'cabin_replace_num']\n\n# Create the preprocessor using ColumnTransformer\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', StandardScaler(), numeric_features),\n        ('cat', OneHotEncoder(drop='first'), categorical_features)\n    ])\n\n# Apply the transformations\nX = preprocessor.fit_transform(train_dataframe.drop('Survived', axis=1))\ny = train_dataframe['Survived']\ntest_dataframe = preprocessor.transform(test_dataframe)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T00:22:27.526494Z","iopub.execute_input":"2025-01-08T00:22:27.526843Z","iopub.status.idle":"2025-01-08T00:22:27.554116Z","shell.execute_reply.started":"2025-01-08T00:22:27.526818Z","shell.execute_reply":"2025-01-08T00:22:27.553252Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Models and their Parameters\n\n# Define models and their parameters\nmodels = {\n    'LogisticRegression': LogisticRegression(max_iter=1000),\n    'RandomForest': RandomForestClassifier(),\n    'GradientBoosting': GradientBoostingClassifier(),\n    'XGBoost': XGBClassifier(use_label_encoder=False, eval_metric='logloss'),\n    'SVC': SVC(),\n    'KNeighbors': KNeighborsClassifier(),\n    'DecisionTree': DecisionTreeClassifier( max_leaf_nodes=3, random_state = 1, ccp_alpha=0.1 )\n}\n\nparams = {\n    'LogisticRegression': {'C': [0.0165, 0.1, 1, 2, 3, 10, 100]},\n    'RandomForest': {'n_estimators': [50, 100, 200, 300, 500], 'max_depth': [None, 2, 3, 4, 5, 10, 20]},\n    'GradientBoosting': {'n_estimators': [50, 100, 200, 300, 400], 'learning_rate': [0.01, 0.1, 0.2]},\n    'XGBoost': {'n_estimators': [50, 100, 200], 'learning_rate': [0.01, 0.1, 0.2]},\n    'SVC': {'C': [0.0165, 0.1, 1, 10, 100], 'kernel': ['linear', 'rbf']},\n    'KNeighbors': {'n_neighbors': [3, 5, 7, 9]},\n    'DecisionTree': {'max_leaf_nodes': [2,3,4,5,6,7,8,9,10], 'ccp_alpha': [ 0.01, 0.012, 0.013, 0.014, 0.0145, 0.015, 0.016, 0.0162, 0.0165, 0.0167, 0.1, 0.2 ] }\n}\n\n# Initialize StratifiedKFold\nkf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n# Train models and find best parameters\nbest_models = {}\nbest_scores = {}\nfor name, model in models.items():\n    print(f\"Training {name}...\")\n    grid = GridSearchCV(model, params[name], cv=kf, scoring='accuracy')\n    grid.fit(X, y)\n    best_models[name] = grid.best_estimator_\n    best_scores[name] = grid.best_score_\n    print(f\"Best parameters for {name}: {grid.best_params_}\")\n    print(f\"Best score for {name}: {grid.best_score_}\")\n\n\n\n\n# Split the data into training and validation sets\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n\n# Evaluate each model\nvalidation_scores = {}\nfor name, model in best_models.items():\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_val)\n    accuracy = accuracy_score(y_val, y_pred)\n    validation_scores[name] = accuracy\n    print(f\"Evaluation of {name}:\")\n    print(f\"Accuracy: {accuracy}\")\n    print(f\"Confusion Matrix:\\n{confusion_matrix(y_val, y_pred)}\")\n    print(f\"Classification Report:\\n{classification_report(y_val, y_pred)}\\n\")\n\nbest_model_name = max(validation_scores, key=validation_scores.get)\nbest_model = best_models[best_model_name]\nprint(f\"The best model is: {best_model_name} with accuracy: {validation_scores[best_model_name]}\")\n\n# Train the best model on the full training data\nbest_model.fit(X, y)\n\n# Make predictions\npredictions = best_model.predict(test_dataframe)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T01:11:59.451320Z","iopub.execute_input":"2025-01-08T01:11:59.451730Z","iopub.status.idle":"2025-01-08T01:13:38.016099Z","shell.execute_reply.started":"2025-01-08T01:11:59.451702Z","shell.execute_reply":"2025-01-08T01:13:38.013909Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# from sklearn.ensemble import RandomForestClassifier #!\n# # from sklearn.tree import DecisionTreeClassifier\n# # from sklearn.model_selection import train_test_split\n# from sklearn.impute import SimpleImputer #!\n# # from sklearn.experimental import enable_iterative_imputer\n# # from sklearn.impute import IterativeImputer\n\n# features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"] #!\n# # y = train_data.Survived\n# y = train_data[\"Survived\"]#!\n\n# sub_y = submission_data.Survived.values#!\n# X = pd.get_dummies(train_data[features])#!\n\n# X_test = pd.get_dummies(test_data[features])#!\n\n# imputer = SimpleImputer(strategy='most_frequent') #most_frequent = 192 #constant = 191\n# imputer = IterativeImputer()\n# X_test = pd.DataFrame(imputer.fit_transform(X_test_pd), columns=X_test_pd.columns)\n# X = pd.DataFrame(imputer.fit_transform(X_pd), columns=X_test_pd.columns)\n\n# nodes = [5, 25, 50, 100, 250, 500, 5000 ]\n# train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n\n# print(train_X, \"---- train_y\", train_y, \"---- val_X\", val_X, \"----val_y\", val_y)\n# for max_leaf_nodes in nodes:\n#     mae = get_mae( max_leaf_nodes, 1, train_X, train_y, val_X, val_y)\n#     print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, mae))\n\n\n# ccp_alpha=0.0165, max_leaf_nodes=3,\n# model = RandomForestClassifier( n_estimators = 100, max_depth = 5, random_state = 1) #210 !\n# # model = DecisionTreeClassifier( max_leaf_nodes=3, random_state = 1, ccp_alpha=0.1 ) #288\n# #RandomForestClassifier: n_estimators = 100, max_depth = 5, random_state = 1 == 270\n# #RandomForestClassifier: max_depth = 10 == 283\n# # DecisionTreeClassifier: ( max_leaf_nodes=4, random_state = 0 ) #338\n# # DecisionTreeClassifier: (ccp_alpha=0.1) #418\n# model.fit(X, y) #!\n# predictions = model.predict(X_test) #!\n# # predictions = model.predict_proba(X_test, check_input=True)\n# # mean_predictions = [ sum(prediction) / len(prediction) for prediction in predictions]\n\ntrue_count = 0#!\nfalse_count = 0#!\nidx = 0#!\nsub_y = gender_submission_df.Survived.values\npreds = []\n\nfor i in predictions:#!\n    preds.append(round(i) )\n    \n    if i == sub_y[idx]:#!\n        true_count = true_count + 1#!\n        idx = idx + 1#!\n    else:#!\n        false_count = false_count + 1#!\n        \nprint(\" correct_prediction_count: %d  \\t\\t false_prediction_count:  %d\" %(true_count, false_count))#!\n\nprint( preds, len(preds))#!\n\n# output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions })#!\n\n\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": preds\n    })\n\nsubmission.to_csv('submission.csv', index=False)\n\nprint(\"Your submission was successfully saved!\")#!","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T01:15:02.120603Z","iopub.execute_input":"2025-01-08T01:15:02.121017Z","iopub.status.idle":"2025-01-08T01:15:02.134298Z","shell.execute_reply.started":"2025-01-08T01:15:02.120989Z","shell.execute_reply":"2025-01-08T01:15:02.133058Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Node Tree Structure","metadata":{}},{"cell_type":"code","source":"clf = model\nn_nodes = clf.tree_.node_count\nchildren_left = clf.tree_.children_left\nchildren_right = clf.tree_.children_right\nfeature = clf.tree_.feature\nthreshold = clf.tree_.threshold\nvalues = clf.tree_.value\n\nnode_depth = np.zeros(shape=n_nodes, dtype=np.int64)\nis_leaves = np.zeros(shape=n_nodes, dtype=bool)\nstack = [(0, 0)]  # start with the root node id (0) and its depth (0)\nwhile len(stack) > 0:\n    # `pop` ensures each node is only visited once\n    node_id, depth = stack.pop()\n    node_depth[node_id] = depth\n\n    # If the left and right child of a node is not the same we have a split\n    # node\n    is_split_node = children_left[node_id] != children_right[node_id]\n    # If a split node, append left and right children and depth to `stack`\n    # so we can loop through them\n    if is_split_node:\n        stack.append((children_left[node_id], depth + 1))\n        stack.append((children_right[node_id], depth + 1))\n    else:\n        is_leaves[node_id] = True\n\nprint(\n    \"The binary tree structure has {n} nodes and has \"\n    \"the following tree structure:\\n\".format(n=n_nodes)\n)\n\nfor i in range(n_nodes):\n    if is_leaves[i]:\n        print(\n            \"{space}node={node} is a leaf node with value={value}.\".format(\n                space=node_depth[i] * \"\\t\", node=i, value=np.around(values[i], 3)\n            )\n        )\n    else:\n        print(\n            \"{space}node={node} is a split node with value={value}: \"\n            \"go to node {left} if X[:, {feature}] <= {threshold} \"\n            \"else to node {right}.\".format(\n                space=node_depth[i] * \"\\t\",\n                node=i,\n                left=children_left[i],\n                feature=feature[i],\n                threshold=threshold[i],\n                right=children_right[i],\n                value=np.around(values[i], 3),\n            )\n        )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-08T01:07:31.731458Z","iopub.execute_input":"2025-01-08T01:07:31.731799Z","iopub.status.idle":"2025-01-08T01:07:31.744480Z","shell.execute_reply.started":"2025-01-08T01:07:31.731775Z","shell.execute_reply":"2025-01-08T01:07:31.743375Z"}},"outputs":[],"execution_count":null}]}